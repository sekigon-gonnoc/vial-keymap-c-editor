export interface KeymapLayer {
    name?: string;
    layout: string;  // LAYOUTマクロの名前 (例: "LAYOUT", "LAYOUT_60_ansi" など)
    keys: string[];  // キーコードを文字列で保持 (例: "KC_A", "KC_LSFT" など)
}

export interface QmkKeymap {
    version: number;
    author: string;
    notes?: string;
    documentation?: string;
    keyboard: string;
    keymap: string;
    layout: string;
    layers: KeymapLayer[];
}

// C言語のkeymap.cファイルをパースしてQmkKeymapオブジェクトを生成
export function parseKeymapC(content: string): QmkKeymap {
    const keymap: QmkKeymap = {
        version: 1,
        author: "",
        keyboard: "",
        keymap: "default",
        layout: "",
        layers: []
    };

    // コメントを除去
    content = content.replace(/\/\*[\s\S]*?\*\//g, "");
    content = content.replace(/\/\/.*/g, "");

    // レイヤー配列を探す
    const layerMatch = content.match(/const\s+uint16_t\s+PROGMEM\s+keymaps\[[\s\S]*?\]\s*=\s*\{([\s\S]*?)\};/);
    if (!layerMatch) {
        throw new Error("No keymap array found");
    }

    // レイヤーごとに分割
    const layersStr = layerMatch[1];
    const layers = layersStr.split(/\}\s*,\s*\{/);

    // レイヤーごとにキーコードを解析
    keymap.layers = layers.map(layer => {
        // LAYOUTマクロを抽出
        const layoutMatch = layer.match(/(\w+)\s*\(/);
        const layoutName = layoutMatch ? layoutMatch[1] : "LAYOUT";

        // キーコードを抽出
        const keycodeMatch = layer.match(/\(([\s\S]*)\)/);
        if (!keycodeMatch) {
            return { layout: layoutName, keys: [] };
        }

        const keycodes = keycodeMatch[1]
            .split(',')
            .map(code => code.trim())
            .filter(code => code.length > 0);

        return {
            layout: layoutName,
            keys: keycodes
        };
    });

    // レイアウトマクロ名をkeymap.layoutに設定
    if (keymap.layers.length > 0) {
        keymap.layout = keymap.layers[0].layout;
    }

    return keymap;
}

// QmkKeymapオブジェクトをkeymap.cファイルの内容に変換
export function generateKeymapC(keymap: QmkKeymap): string {
    let output = `// Generated by Vial Keymap C Editor
#include QMK_KEYBOARD_H

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
`;

    // 各レイヤーのキーマップを生成
    keymap.layers.forEach((layer, index) => {
        output += `    [${index}] = ${layer.layout}(\n`;
        
        // キーコードを4つごとに改行を入れて整形
        for (let i = 0; i < layer.keys.length; i += 4) {
            output += '        ' + layer.keys.slice(i, i + 4).join(', ');
            if (i + 4 < layer.keys.length) {
                output += ',';
            }
            output += '\n';
        }

        output += '    )';
        if (index < keymap.layers.length - 1) {
            output += ',';
        }
        output += '\n';
    });

    output += '};\n';
    return output;
}
